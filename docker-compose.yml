services:
  db_task:
    image: postgres:15
    container_name: db_task
    env_file: .env
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  adminer:
    image: adminer
    container_name: adminer
    restart: always
    ports:
      - "8080:8080"
    depends_on:
      - db_task
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7
    container_name: redis
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

  task:
    build:
      context: ./django_backend
    container_name: task
    command: python manage.py runserver 0.0.0.0:8000
    volumes:
      - ./django_backend:/app
    ports:
      - "8000:8000"
    env_file: .env
    depends_on:
      db_task:
        condition: service_healthy
      redis:
        condition: service_healthy

  celery_worker:
    build:
      context: ./django_backend
    container_name: celery_worker
    command: celery -A config worker -l info
    volumes:
     - ./django_backend:/app
    env_file: .env
    depends_on:
      task:
        condition: service_started
      redis:
        condition: service_healthy

  celery_beat:
    build:
      context: ./django_backend
    container_name: celery_beat
    command: celery -A config beat -l info
    volumes:
     - ./django_backend:/app
    env_file: .env
    depends_on:
      task:
        condition: service_started
      redis:
        condition: service_healthy

volumes:
  postgres_data:
